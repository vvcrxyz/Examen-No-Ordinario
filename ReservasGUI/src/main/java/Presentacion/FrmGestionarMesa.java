/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Presentacion;

import Util.ButtonRenderer;
import dto.MesaDTO;
import entidades.MesaEntidad;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logica.MesaNegocio;
import utilerias.ButtonEditor;


/**
 *
 * @author limon
 */
public class FrmGestionarMesa extends javax.swing.JFrame {

    MesaNegocio mesaNegocio = new MesaNegocio();
    List<MesaDTO> listaMesas = mesaNegocio.buscarTodasMesas();
    FrmGestionarMesa frmGestionarMesa;
    DefaultTableModel modeloTabla = new DefaultTableModel();
    List<MesaDTO> mesas = new ArrayList<>();
    FrmModuloMesas frmModuloMesas;
    /**
     * Creates new form FrmGestionarMesa
     */
    public FrmGestionarMesa() {
        initComponents();
        
    // Establece la lista de mesas al seleccionar la ubicación inicial
    String ubicacionInicial = (String) comboBoxUbicacion.getSelectedItem();
    listaMesas = mesaNegocio.buscarTodasMesas(); // Asegúrate de cargar todas las mesas desde el inicio
    
    // Filtra las mesas según la ubicación seleccionada por defecto
    List<MesaDTO> mesasFiltradas = new ArrayList<>();
    for (MesaDTO mesa : listaMesas) {
        if (mesa.getUbicacion().equals(ubicacionInicial)) {
            mesasFiltradas.add(mesa);
        }
    }
    
    // Actualiza la tabla con las mesas filtradas
    actualizarTabla(mesasFiltradas);
    
    
    }
    
    private void cargarDatosTablaMesas() {
        
        modeloTabla = (DefaultTableModel) tblMesa.getModel();
        modeloTabla.setRowCount(0);
        
        if(mesas == null || mesas.isEmpty())
            return;
        
        for(MesaDTO mesa : mesas){
        
            String codigo  = mesa.getCodigoMesa();

            
            Object[] fila = new Object[2];
            fila[0] = codigo;
            
            modeloTabla.addRow(fila);
            
        }
        
    }
    
    private void actualizarTabla(List<MesaDTO> mesas) {
        DefaultTableModel modeloTabla = (DefaultTableModel) tblMesa.getModel();
        // Limpia la tabla antes de agregar los nuevos datos
        modeloTabla.setRowCount(0);

        // Agrega las filas correspondientes a las mesas filtradas
        for (MesaDTO mesa : mesas) {
            modeloTabla.addRow(new Object[]{
                mesa.getCodigoMesa(),
                "Editar",
                "Eliminar"
            });
        }

        // Configura renderizadores y editores para las columnas de botones
        tblMesa.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer("Editar", Color.ORANGE));
        tblMesa.getColumnModel().getColumn(1).setCellEditor(new ButtonEditor("Editar", new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    
                    if(tblMesa.getSelectedRow() == -1)
                        return;
                    
                    MesaDTO mesaSeleccionada = mesas.get(tblMesa.getSelectedRow());
                    
                    FrmEditarMesa frm = new FrmEditarMesa(frmGestionarMesa, mesaSeleccionada);
                    
                    frm.setVisible(true);
                    cargarDatosTablaMesas();
                    cargarMesasPorUbicacion();
                   
                          
                }

        }));
 
    }
    
    private void cargarMesasPorUbicacion(){
        if(mesas != null) {
            mesas.clear();  // Clear the list of mesas to reload filtered data
        }

        String ubicacionSeleccionada = (String) comboBoxUbicacion.getSelectedItem();
        MesaDTO ubicacion = new MesaDTO();
        ubicacion.setUbicacion(ubicacionSeleccionada);  // Set selected location

        try {
            mesas = mesaNegocio.buscarMesasPorUbicacion(ubicacion);  // Fetch mesas for the selected location
        } catch (Exception ex) {
           
        }

        cargarDatosTablaMesas();  // Refresh the table with the new list
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        btnRegresar = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        comboBoxUbicacion = new javax.swing.JComboBox<>();
        btnInsertarMesa = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMesa = new javax.swing.JTable();
        btnEliminarMesa = new javax.swing.JLabel();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("MingLiU-ExtB", 1, 64)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Gestionar mesa");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, -1, -1));

        btnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnRegresar.png"))); // NOI18N
        btnRegresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRegresarMouseClicked(evt);
            }
        });
        getContentPane().add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 30, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Ubicación");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, -1, -1));

        comboBoxUbicacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Terraza", "General", "Ventana" }));
        comboBoxUbicacion.setSelectedIndex(-1);
        comboBoxUbicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxUbicacionActionPerformed(evt);
            }
        });
        getContentPane().add(comboBoxUbicacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 180, 110, 30));

        btnInsertarMesa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnInsertarMesa.png"))); // NOI18N
        btnInsertarMesa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnInsertarMesa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInsertarMesaMouseClicked(evt);
            }
        });
        getContentPane().add(btnInsertarMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 630, -1, -1));

        tblMesa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Codigo mesa", "Editar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMesa);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 230, 650, 360));

        btnEliminarMesa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnEliminarMesa.png"))); // NOI18N
        btnEliminarMesa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarMesa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarMesaMouseClicked(evt);
            }
        });
        getContentPane().add(btnEliminarMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 630, -1, -1));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FrmMesas.jpg"))); // NOI18N
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegresarMouseClicked
        // TODO add your handling code here:
        FrmModuloMesas frm = new FrmModuloMesas();
        frm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegresarMouseClicked

    private void btnInsertarMesaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsertarMesaMouseClicked
        // TODO add your handling code here:
        FrmInsertarMesa frm = new FrmInsertarMesa();
        frm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnInsertarMesaMouseClicked

    private void comboBoxUbicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxUbicacionActionPerformed
        String ubicacionSeleccionada = (String) comboBoxUbicacion.getSelectedItem();
    
        // Filtra las mesas por la ubicación seleccionada
        List<MesaDTO> mesasFiltradas = new ArrayList<>();
        for (MesaDTO mesa : listaMesas) {
            if (mesa.getUbicacion().equals(ubicacionSeleccionada)) {
                mesasFiltradas.add(mesa);
            }
        }

        // Actualiza la tabla con las mesas filtradas
        actualizarTabla(mesasFiltradas);
    }//GEN-LAST:event_comboBoxUbicacionActionPerformed

    private List<MesaDTO> filtrarMesasPorUbicacion(String ubicacion) {
        List<MesaDTO> mesasFiltradas = new ArrayList<>();
        for (MesaDTO mesa : listaMesas) {
            if (mesa.getUbicacion().equals(ubicacion)) {
                mesasFiltradas.add(mesa);
            }
        }
        return mesasFiltradas;
    }

    
    private void btnEliminarMesaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarMesaMouseClicked
            int filaSeleccionada = tblMesa.getSelectedRow();
            if (filaSeleccionada == -1) {
                JOptionPane.showMessageDialog(this, "Selecciona el código de la mesa de la tabla", "Eliminar Mesa", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Obtener la mesa seleccionada desde la lista filtrada
            String ubicacionSeleccionada = (String) comboBoxUbicacion.getSelectedItem();
            List<MesaDTO> mesasFiltradas = filtrarMesasPorUbicacion(ubicacionSeleccionada);
            if (mesasFiltradas.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay mesas disponibles en esta ubicación.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            MesaDTO mesaSeleccionada = mesasFiltradas.get(filaSeleccionada);

            int opcion = JOptionPane.showConfirmDialog(
                this,
                String.format("El código a eliminar es %s. ¿Continuar?", mesaSeleccionada.getCodigoMesa()),
                "Eliminar Mesa",
                JOptionPane.YES_NO_OPTION
            );

            if (opcion != JOptionPane.YES_OPTION) {
                return;
            }

            try {
                // Lógica de conversión: DTO -> Entidad
                MesaEntidad mesaEntidad = new MesaEntidad();
                mesaEntidad.setCodigoMesa(mesaSeleccionada.getCodigoMesa());

                // Eliminar la mesa en la base de datos
                mesaNegocio.eliminarMesa(mesaEntidad); // Invoca el método de negocio para eliminar de la base de datos
                JOptionPane.showMessageDialog(this, "Mesa eliminada con el código: " + mesaSeleccionada.getCodigoMesa(), "Eliminar Mesa", JOptionPane.INFORMATION_MESSAGE);

                // Recargar las mesas después de la eliminación
                listaMesas = mesaNegocio.buscarTodasMesas();  // Recargar todas las mesas desde la base de datos
                if (listaMesas == null || listaMesas.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "No se encontraron mesas disponibles.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else {
                    cargarMesasPorUbicacion();  // Filtrar y actualizar las mesas por la ubicación seleccionada
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al eliminar la mesa: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_btnEliminarMesaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmGestionarMesa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmGestionarMesa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmGestionarMesa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmGestionarMesa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmGestionarMesa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnEliminarMesa;
    private javax.swing.JLabel btnInsertarMesa;
    private javax.swing.JLabel btnRegresar;
    private javax.swing.JComboBox<String> comboBoxUbicacion;
    private javax.swing.JLabel fondo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblMesa;
    // End of variables declaration//GEN-END:variables
}

